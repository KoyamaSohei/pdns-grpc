// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pdns.proto

package pdns_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseStatus int32

const (
	ResponseStatus_Ok                  ResponseStatus = 0
	ResponseStatus_InternalServerError ResponseStatus = 1
	ResponseStatus_BadRequest          ResponseStatus = 2
)

var ResponseStatus_name = map[int32]string{
	0: "Ok",
	1: "InternalServerError",
	2: "BadRequest",
}

var ResponseStatus_value = map[string]int32{
	"Ok":                  0,
	"InternalServerError": 1,
	"BadRequest":          2,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}

func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{0}
}

type RRType int32

const (
	RRType_A          RRType = 0
	RRType_AAAA       RRType = 1
	RRType_AFSDB      RRType = 2
	RRType_ANY        RRType = 3
	RRType_ATMA       RRType = 4
	RRType_AVC        RRType = 5
	RRType_AXFR       RRType = 6
	RRType_CAA        RRType = 7
	RRType_CDNSKEY    RRType = 8
	RRType_CDS        RRType = 9
	RRType_CERT       RRType = 10
	RRType_CNAME      RRType = 11
	RRType_CSYNC      RRType = 12
	RRType_DHCID      RRType = 13
	RRType_DLV        RRType = 14
	RRType_DNAME      RRType = 15
	RRType_DNSKEY     RRType = 16
	RRType_DS         RRType = 17
	RRType_EID        RRType = 18
	RRType_EUI48      RRType = 19
	RRType_EUI64      RRType = 20
	RRType_GID        RRType = 21
	RRType_GPOS       RRType = 22
	RRType_HINFO      RRType = 23
	RRType_HIP        RRType = 24
	RRType_ISDN       RRType = 25
	RRType_IXFR       RRType = 26
	RRType_KEY        RRType = 27
	RRType_KX         RRType = 28
	RRType_L32        RRType = 29
	RRType_L64        RRType = 30
	RRType_LOC        RRType = 31
	RRType_LP         RRType = 32
	RRType_MAILA      RRType = 33
	RRType_MAILB      RRType = 34
	RRType_MB         RRType = 35
	RRType_MD         RRType = 36
	RRType_MF         RRType = 37
	RRType_MG         RRType = 38
	RRType_MINFO      RRType = 39
	RRType_MR         RRType = 40
	RRType_MX         RRType = 41
	RRType_NAPTR      RRType = 42
	RRType_NID        RRType = 43
	RRType_NIMLOC     RRType = 44
	RRType_NINFO      RRType = 45
	RRType_NS         RRType = 46
	RRType_NSEC       RRType = 47
	RRType_NSEC3      RRType = 48
	RRType_NSEC3PARAM RRType = 49
	RRType_NULL       RRType = 50
	RRType_NXT        RRType = 51
	RRType_None       RRType = 52
	RRType_OPENPGPKEY RRType = 53
	RRType_OPT        RRType = 54
	RRType_PTR        RRType = 55
	RRType_PX         RRType = 56
	RRType_RKEY       RRType = 57
	RRType_RP         RRType = 58
	RRType_RRSIG      RRType = 59
	RRType_RT         RRType = 60
	RRType_Reserved   RRType = 61
	RRType_SIG        RRType = 62
	RRType_SMIMEA     RRType = 63
	RRType_SOA        RRType = 64
	RRType_SPF        RRType = 65
	RRType_SRV        RRType = 66
	RRType_SSHFP      RRType = 67
	RRType_TA         RRType = 68
	RRType_TALINK     RRType = 69
	RRType_TKEY       RRType = 70
	RRType_TLSA       RRType = 71
	RRType_TSIG       RRType = 72
	RRType_TXT        RRType = 73
	RRType_UID        RRType = 74
	RRType_UINFO      RRType = 75
	RRType_UNSPEC     RRType = 76
	RRType_URI        RRType = 77
	RRType_X25        RRType = 78
	RRType_NSAP_PTR   RRType = 79
)

var RRType_name = map[int32]string{
	0:  "A",
	1:  "AAAA",
	2:  "AFSDB",
	3:  "ANY",
	4:  "ATMA",
	5:  "AVC",
	6:  "AXFR",
	7:  "CAA",
	8:  "CDNSKEY",
	9:  "CDS",
	10: "CERT",
	11: "CNAME",
	12: "CSYNC",
	13: "DHCID",
	14: "DLV",
	15: "DNAME",
	16: "DNSKEY",
	17: "DS",
	18: "EID",
	19: "EUI48",
	20: "EUI64",
	21: "GID",
	22: "GPOS",
	23: "HINFO",
	24: "HIP",
	25: "ISDN",
	26: "IXFR",
	27: "KEY",
	28: "KX",
	29: "L32",
	30: "L64",
	31: "LOC",
	32: "LP",
	33: "MAILA",
	34: "MAILB",
	35: "MB",
	36: "MD",
	37: "MF",
	38: "MG",
	39: "MINFO",
	40: "MR",
	41: "MX",
	42: "NAPTR",
	43: "NID",
	44: "NIMLOC",
	45: "NINFO",
	46: "NS",
	47: "NSEC",
	48: "NSEC3",
	49: "NSEC3PARAM",
	50: "NULL",
	51: "NXT",
	52: "None",
	53: "OPENPGPKEY",
	54: "OPT",
	55: "PTR",
	56: "PX",
	57: "RKEY",
	58: "RP",
	59: "RRSIG",
	60: "RT",
	61: "Reserved",
	62: "SIG",
	63: "SMIMEA",
	64: "SOA",
	65: "SPF",
	66: "SRV",
	67: "SSHFP",
	68: "TA",
	69: "TALINK",
	70: "TKEY",
	71: "TLSA",
	72: "TSIG",
	73: "TXT",
	74: "UID",
	75: "UINFO",
	76: "UNSPEC",
	77: "URI",
	78: "X25",
	79: "NSAP_PTR",
}

var RRType_value = map[string]int32{
	"A":          0,
	"AAAA":       1,
	"AFSDB":      2,
	"ANY":        3,
	"ATMA":       4,
	"AVC":        5,
	"AXFR":       6,
	"CAA":        7,
	"CDNSKEY":    8,
	"CDS":        9,
	"CERT":       10,
	"CNAME":      11,
	"CSYNC":      12,
	"DHCID":      13,
	"DLV":        14,
	"DNAME":      15,
	"DNSKEY":     16,
	"DS":         17,
	"EID":        18,
	"EUI48":      19,
	"EUI64":      20,
	"GID":        21,
	"GPOS":       22,
	"HINFO":      23,
	"HIP":        24,
	"ISDN":       25,
	"IXFR":       26,
	"KEY":        27,
	"KX":         28,
	"L32":        29,
	"L64":        30,
	"LOC":        31,
	"LP":         32,
	"MAILA":      33,
	"MAILB":      34,
	"MB":         35,
	"MD":         36,
	"MF":         37,
	"MG":         38,
	"MINFO":      39,
	"MR":         40,
	"MX":         41,
	"NAPTR":      42,
	"NID":        43,
	"NIMLOC":     44,
	"NINFO":      45,
	"NS":         46,
	"NSEC":       47,
	"NSEC3":      48,
	"NSEC3PARAM": 49,
	"NULL":       50,
	"NXT":        51,
	"None":       52,
	"OPENPGPKEY": 53,
	"OPT":        54,
	"PTR":        55,
	"PX":         56,
	"RKEY":       57,
	"RP":         58,
	"RRSIG":      59,
	"RT":         60,
	"Reserved":   61,
	"SIG":        62,
	"SMIMEA":     63,
	"SOA":        64,
	"SPF":        65,
	"SRV":        66,
	"SSHFP":      67,
	"TA":         68,
	"TALINK":     69,
	"TKEY":       70,
	"TLSA":       71,
	"TSIG":       72,
	"TXT":        73,
	"UID":        74,
	"UINFO":      75,
	"UNSPEC":     76,
	"URI":        77,
	"X25":        78,
	"NSAP_PTR":   79,
}

func (x RRType) String() string {
	return proto.EnumName(RRType_name, int32(x))
}

func (RRType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{1}
}

type InitZoneRequest struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Account              string   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitZoneRequest) Reset()         { *m = InitZoneRequest{} }
func (m *InitZoneRequest) String() string { return proto.CompactTextString(m) }
func (*InitZoneRequest) ProtoMessage()    {}
func (*InitZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{0}
}

func (m *InitZoneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitZoneRequest.Unmarshal(m, b)
}
func (m *InitZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitZoneRequest.Marshal(b, m, deterministic)
}
func (m *InitZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitZoneRequest.Merge(m, src)
}
func (m *InitZoneRequest) XXX_Size() int {
	return xxx_messageInfo_InitZoneRequest.Size(m)
}
func (m *InitZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitZoneRequest proto.InternalMessageInfo

func (m *InitZoneRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *InitZoneRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type InitZoneResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pdns_grpc.ResponseStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InitZoneResponse) Reset()         { *m = InitZoneResponse{} }
func (m *InitZoneResponse) String() string { return proto.CompactTextString(m) }
func (*InitZoneResponse) ProtoMessage()    {}
func (*InitZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{1}
}

func (m *InitZoneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitZoneResponse.Unmarshal(m, b)
}
func (m *InitZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitZoneResponse.Marshal(b, m, deterministic)
}
func (m *InitZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitZoneResponse.Merge(m, src)
}
func (m *InitZoneResponse) XXX_Size() int {
	return xxx_messageInfo_InitZoneResponse.Size(m)
}
func (m *InitZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitZoneResponse proto.InternalMessageInfo

func (m *InitZoneResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_Ok
}

type AddRecordRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Origin               string   `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Account              string   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Type                 RRType   `protobuf:"varint,4,opt,name=type,proto3,enum=pdns_grpc.RRType" json:"type,omitempty"`
	Ttl                  int64    `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRecordRequest) Reset()         { *m = AddRecordRequest{} }
func (m *AddRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AddRecordRequest) ProtoMessage()    {}
func (*AddRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{2}
}

func (m *AddRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRecordRequest.Unmarshal(m, b)
}
func (m *AddRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRecordRequest.Marshal(b, m, deterministic)
}
func (m *AddRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordRequest.Merge(m, src)
}
func (m *AddRecordRequest) XXX_Size() int {
	return xxx_messageInfo_AddRecordRequest.Size(m)
}
func (m *AddRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordRequest proto.InternalMessageInfo

func (m *AddRecordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddRecordRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *AddRecordRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AddRecordRequest) GetType() RRType {
	if m != nil {
		return m.Type
	}
	return RRType_A
}

func (m *AddRecordRequest) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *AddRecordRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type AddRecordResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pdns_grpc.ResponseStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddRecordResponse) Reset()         { *m = AddRecordResponse{} }
func (m *AddRecordResponse) String() string { return proto.CompactTextString(m) }
func (*AddRecordResponse) ProtoMessage()    {}
func (*AddRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbda3279c8b118b, []int{3}
}

func (m *AddRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRecordResponse.Unmarshal(m, b)
}
func (m *AddRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRecordResponse.Marshal(b, m, deterministic)
}
func (m *AddRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordResponse.Merge(m, src)
}
func (m *AddRecordResponse) XXX_Size() int {
	return xxx_messageInfo_AddRecordResponse.Size(m)
}
func (m *AddRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordResponse proto.InternalMessageInfo

func (m *AddRecordResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_Ok
}

func init() {
	proto.RegisterEnum("pdns_grpc.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
	proto.RegisterEnum("pdns_grpc.RRType", RRType_name, RRType_value)
	proto.RegisterType((*InitZoneRequest)(nil), "pdns_grpc.InitZoneRequest")
	proto.RegisterType((*InitZoneResponse)(nil), "pdns_grpc.InitZoneResponse")
	proto.RegisterType((*AddRecordRequest)(nil), "pdns_grpc.AddRecordRequest")
	proto.RegisterType((*AddRecordResponse)(nil), "pdns_grpc.AddRecordResponse")
}

func init() { proto.RegisterFile("pdns.proto", fileDescriptor_dfbda3279c8b118b) }

var fileDescriptor_dfbda3279c8b118b = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x73, 0xdb, 0xc4,
	0x17, 0xad, 0x63, 0xc7, 0x89, 0x37, 0xfd, 0xa5, 0x27, 0xdb, 0x1f, 0xad, 0x9b, 0x16, 0x08, 0x86,
	0x42, 0x08, 0x10, 0xa8, 0x93, 0x86, 0xf2, 0x9f, 0xb5, 0xfe, 0xd8, 0x4b, 0x24, 0x59, 0xb3, 0x2b,
	0x67, 0x1c, 0x5e, 0x3a, 0xc6, 0xd6, 0x74, 0x3c, 0xb4, 0x92, 0x91, 0x15, 0x66, 0xfa, 0x55, 0x78,
	0xe5, 0x91, 0x2f, 0xc9, 0xdc, 0x1b, 0x19, 0xdc, 0x4e, 0x9f, 0x78, 0xda, 0xb3, 0xf7, 0x9c, 0x3d,
	0xf7, 0xdc, 0xb5, 0xb5, 0x42, 0x2c, 0x66, 0xd9, 0xf2, 0x78, 0x51, 0xe4, 0x65, 0x2e, 0x5b, 0x84,
	0x9f, 0x3e, 0x2b, 0x16, 0xd3, 0x8e, 0x23, 0x6e, 0xe9, 0x6c, 0x5e, 0xfe, 0x9c, 0x67, 0xa9, 0x49,
	0x7f, 0xbb, 0x4a, 0x97, 0xa5, 0xbc, 0x23, 0x9a, 0xb3, 0xfc, 0xc5, 0x64, 0x9e, 0xb5, 0x6b, 0x07,
	0xb5, 0xc3, 0x96, 0xa9, 0x76, 0xb2, 0x2d, 0xb6, 0x26, 0xd3, 0x69, 0x7e, 0x95, 0x95, 0xed, 0x0d,
	0x26, 0x56, 0xdb, 0x8e, 0x27, 0xf0, 0xaf, 0xc9, 0x72, 0x91, 0x67, 0xcb, 0x54, 0x3e, 0x12, 0xcd,
	0x65, 0x39, 0x29, 0xaf, 0x96, 0xec, 0xb2, 0xdb, 0xbd, 0x77, 0xfc, 0x4f, 0xd3, 0xe3, 0x95, 0xc8,
	0xb2, 0xc0, 0x54, 0xc2, 0xce, 0x5f, 0x35, 0x01, 0x35, 0x9b, 0x99, 0x74, 0x9a, 0x17, 0xb3, 0x55,
	0x1a, 0x29, 0x1a, 0xd9, 0xe4, 0x45, 0x5a, 0x65, 0x61, 0x4c, 0x09, 0xf3, 0x62, 0xfe, 0x6c, 0x9e,
	0x55, 0x41, 0xaa, 0xdd, 0x7a, 0xc2, 0xfa, 0x2b, 0x09, 0xe5, 0x43, 0xd1, 0x28, 0x5f, 0x2e, 0xd2,
	0x76, 0x83, 0xb3, 0xec, 0xad, 0x67, 0x31, 0xc9, 0xcb, 0x45, 0x6a, 0x98, 0x96, 0x10, 0xf5, 0xb2,
	0x7c, 0xde, 0xde, 0x3c, 0xa8, 0x1d, 0xd6, 0x0d, 0x41, 0xb2, 0x9c, 0xe6, 0x59, 0x99, 0x66, 0x65,
	0xbb, 0x79, 0x6d, 0x59, 0x6d, 0x3b, 0xbe, 0xd8, 0x5b, 0x0b, 0xfb, 0x9f, 0xa7, 0x3e, 0x52, 0x62,
	0xf7, 0x55, 0x46, 0x36, 0xc5, 0xc6, 0xf0, 0x57, 0xdc, 0x90, 0x77, 0xc5, 0x6d, 0x9d, 0x95, 0x69,
	0x91, 0x4d, 0x9e, 0xdb, 0xb4, 0xf8, 0x3d, 0x2d, 0xbc, 0xa2, 0xc8, 0x0b, 0xd4, 0xe4, 0xae, 0x10,
	0xbd, 0xc9, 0xea, 0x86, 0xb0, 0x71, 0xf4, 0x67, 0x53, 0x34, 0xaf, 0xe7, 0x90, 0x9b, 0xa2, 0xa6,
	0x70, 0x43, 0x6e, 0x8b, 0x86, 0x52, 0x4a, 0xa1, 0x26, 0x5b, 0x62, 0x53, 0xf9, 0xd6, 0xed, 0x61,
	0x43, 0x6e, 0x89, 0xba, 0x8a, 0x2e, 0x51, 0x67, 0x36, 0x09, 0x15, 0x1a, 0x5c, 0xba, 0x70, 0xb0,
	0xc9, 0xa5, 0xb1, 0x6f, 0xd0, 0xa4, 0x92, 0xa3, 0x14, 0xb6, 0xe4, 0x8e, 0xd8, 0x72, 0xdc, 0xc8,
	0x9e, 0x7b, 0x97, 0xd8, 0xe6, 0xaa, 0x6b, 0xd1, 0x22, 0xa1, 0xe3, 0x99, 0x04, 0x82, 0x9c, 0x9d,
	0x48, 0x85, 0x1e, 0x76, 0x18, 0xda, 0xcb, 0xc8, 0xc1, 0x4d, 0x82, 0xee, 0xc0, 0xd1, 0x2e, 0xfe,
	0x47, 0x67, 0xdc, 0xe0, 0x02, 0xbb, 0x5c, 0x63, 0xe5, 0x2d, 0x29, 0x44, 0xb3, 0xf2, 0x04, 0xcd,
	0xe9, 0x5a, 0xec, 0x91, 0xce, 0xd3, 0x2e, 0x24, 0xe9, 0xbc, 0x91, 0x3e, 0x7d, 0x82, 0xdb, 0x15,
	0x3c, 0x3b, 0xc5, 0xff, 0x89, 0xee, 0x6b, 0x17, 0x6f, 0x51, 0xeb, 0x7e, 0x3c, 0xb4, 0xb8, 0x43,
	0xec, 0x40, 0x47, 0xfe, 0x10, 0x77, 0x89, 0x1d, 0xe8, 0x18, 0x6d, 0x62, 0xb5, 0x75, 0x23, 0xdc,
	0x63, 0x44, 0xb3, 0xec, 0x13, 0x49, 0xad, 0xee, 0x53, 0xab, 0xf3, 0x31, 0x1e, 0x50, 0x21, 0x38,
	0xe9, 0xe2, 0x6d, 0x06, 0x67, 0xa7, 0x78, 0x87, 0xc1, 0xd0, 0xc1, 0xbb, 0x24, 0x09, 0x62, 0x1c,
	0x90, 0x77, 0xa8, 0x74, 0xa0, 0xf0, 0xde, 0x0a, 0xf6, 0xd0, 0x21, 0x36, 0xec, 0xe1, 0x7d, 0x5e,
	0x5d, 0x7c, 0xc0, 0xab, 0x8f, 0x87, 0xbc, 0xf6, 0xf1, 0x21, 0x4b, 0x39, 0xd1, 0x47, 0x5c, 0x32,
	0x38, 0xe4, 0x75, 0x8c, 0x8f, 0x89, 0x8a, 0x54, 0x9c, 0x18, 0x1c, 0x51, 0xb3, 0x48, 0xbb, 0xf8,
	0x84, 0xae, 0x21, 0xd2, 0x21, 0x35, 0xfe, 0x94, 0x79, 0x3e, 0xfa, 0x19, 0x1d, 0x89, 0x2c, 0x8e,
	0x69, 0x82, 0xc8, 0x7a, 0x0e, 0x3e, 0x67, 0xd2, 0x7a, 0xce, 0x09, 0xbe, 0xa0, 0x5f, 0x9d, 0x61,
	0xac, 0x8c, 0x0a, 0xf1, 0x88, 0x45, 0xa3, 0x20, 0x40, 0x97, 0x6d, 0xc7, 0x09, 0x4e, 0xb8, 0x94,
	0x67, 0x29, 0x4e, 0x49, 0x3c, 0x8c, 0xbd, 0x28, 0xee, 0xc7, 0x74, 0x01, 0x8f, 0x49, 0x32, 0x8c,
	0x13, 0x9c, 0x11, 0xa0, 0x2c, 0x5f, 0x52, 0xaf, 0x78, 0x8c, 0x27, 0x74, 0xc6, 0x90, 0xe6, 0x2b,
	0xaa, 0x98, 0x18, 0x5f, 0x53, 0x4f, 0x63, 0xac, 0xee, 0xe3, 0x1b, 0x2e, 0x25, 0xf8, 0x56, 0xde,
	0x14, 0xdb, 0x26, 0x5d, 0xd2, 0x9f, 0x70, 0x86, 0xef, 0xc8, 0x83, 0xe8, 0xef, 0x69, 0x0c, 0x1b,
	0xea, 0xd0, 0x53, 0xf8, 0x81, 0x8b, 0x43, 0x85, 0x1f, 0x19, 0xc4, 0x3e, 0x14, 0x03, 0x73, 0x81,
	0x1e, 0x19, 0x5a, 0x3b, 0xf0, 0x63, 0x38, 0x64, 0x98, 0x28, 0xb8, 0x74, 0x32, 0x51, 0x81, 0x8e,
	0xce, 0xe1, 0x51, 0x82, 0x84, 0x12, 0xf8, 0x8c, 0x02, 0xab, 0xd0, 0x67, 0x44, 0x3d, 0x06, 0xe4,
	0x92, 0x8c, 0x13, 0x68, 0x02, 0x23, 0xed, 0xe2, 0x27, 0xb2, 0x1b, 0xf1, 0x85, 0x9d, 0x93, 0xcd,
	0x28, 0xb2, 0xb1, 0xe7, 0x20, 0x60, 0xde, 0x68, 0x84, 0x04, 0xc6, 0xdd, 0xc7, 0x88, 0x28, 0x75,
	0x64, 0x55, 0xfc, 0x94, 0x06, 0x1e, 0x76, 0xff, 0xa8, 0x89, 0x9d, 0x78, 0x96, 0x2d, 0xe9, 0x5b,
	0x9a, 0x4f, 0x53, 0xe9, 0x88, 0xed, 0x79, 0xf5, 0x6a, 0xc9, 0xfd, 0xb5, 0xef, 0xf4, 0xb5, 0xf7,
	0x70, 0xff, 0xfe, 0x1b, 0xb9, 0xea, 0x83, 0xf7, 0x45, 0x6b, 0xb2, 0x7a, 0x05, 0xe4, 0xba, 0xf2,
	0xf5, 0x87, 0x6c, 0xff, 0xc1, 0x9b, 0xc9, 0x6b, 0x9f, 0x5f, 0x9a, 0xfc, 0x32, 0x9f, 0xfc, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x06, 0x2b, 0x21, 0x0f, 0xa7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PdnsServiceClient is the client API for PdnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PdnsServiceClient interface {
	InitZone(ctx context.Context, in *InitZoneRequest, opts ...grpc.CallOption) (*InitZoneResponse, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
}

type pdnsServiceClient struct {
	cc *grpc.ClientConn
}

func NewPdnsServiceClient(cc *grpc.ClientConn) PdnsServiceClient {
	return &pdnsServiceClient{cc}
}

func (c *pdnsServiceClient) InitZone(ctx context.Context, in *InitZoneRequest, opts ...grpc.CallOption) (*InitZoneResponse, error) {
	out := new(InitZoneResponse)
	err := c.cc.Invoke(ctx, "/pdns_grpc.PdnsService/initZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdnsServiceClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, "/pdns_grpc.PdnsService/addRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdnsServiceServer is the server API for PdnsService service.
type PdnsServiceServer interface {
	InitZone(context.Context, *InitZoneRequest) (*InitZoneResponse, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
}

// UnimplementedPdnsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPdnsServiceServer struct {
}

func (*UnimplementedPdnsServiceServer) InitZone(ctx context.Context, req *InitZoneRequest) (*InitZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitZone not implemented")
}
func (*UnimplementedPdnsServiceServer) AddRecord(ctx context.Context, req *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}

func RegisterPdnsServiceServer(s *grpc.Server, srv PdnsServiceServer) {
	s.RegisterService(&_PdnsService_serviceDesc, srv)
}

func _PdnsService_InitZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdnsServiceServer).InitZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdns_grpc.PdnsService/InitZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdnsServiceServer).InitZone(ctx, req.(*InitZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdnsService_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdnsServiceServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdns_grpc.PdnsService/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdnsServiceServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PdnsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdns_grpc.PdnsService",
	HandlerType: (*PdnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initZone",
			Handler:    _PdnsService_InitZone_Handler,
		},
		{
			MethodName: "addRecord",
			Handler:    _PdnsService_AddRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdns.proto",
}
